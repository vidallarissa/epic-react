{"version":3,"sources":["exercise/06.md","../node_modules/@mdx-js/react/dist/esm.js"],"names":["readingTime","layoutProps","MDXContent","components","props","mdxType","parentName","isMDXComponent","tableOfContents","id","level","title","children","frontMatter","_defineProperty","obj","key","value","Object","defineProperty","enumerable","configurable","writable","ownKeys","object","enumerableOnly","keys","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","push","apply","_objectSpread2","target","i","arguments","length","source","forEach","getOwnPropertyDescriptors","defineProperties","_objectWithoutProperties","excluded","sourceKeys","indexOf","_objectWithoutPropertiesLoose","sourceSymbolKeys","prototype","propertyIsEnumerable","call","MDXContext","React","createContext","useMDXComponents","contextComponents","useContext","allComponents","DEFAULTS","inlineCode","wrapper","_ref","createElement","Fragment","MDXCreateElement","forwardRef","ref","propComponents","originalType","etc","type","Component","concat","args","argsLength","createElementArgArray","Array","newProps","hasOwnProperty","displayName"],"mappings":"6XAGaA,EAAc,CAAC,KAAO,aAAa,QAAU,KAAK,KAAO,OAAO,MAAQ,MAM/EC,EAAc,GAIL,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,EACF,iBACD,OAAO,YALS,UAKT,iBAAeH,EAAiBG,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAC5E,kBACE,GAAM,SADR,SAGA,kBACE,GAAM,eADR,2BAGA,4DAA2C,0BAAYC,WAAW,KAAvB,uBAC3C,kBACE,GAAM,cADR,cAGA,sNAGA,mFAAkE,0BAAYA,WAAW,KAAvB,YAAlE,iEAC+C,0BAAYA,WAAW,KAAvB,UAD/C,UAC4G,0BAAYA,WAAW,KAAvB,UAD5G,2BAEe,0BAAYA,WAAW,KAAvB,UAFf,qHAIA,kBACE,GAAM,YADR,YAGA,4CACA,sBACE,kBAAIA,WAAW,MAAK,iBAAGA,WAAW,KAC9B,KAAQ,iEADQ,aAGpB,kBAAIA,WAAW,MAAK,iBAAGA,WAAW,KAC9B,KAAQ,8DADQ,WAItB,gKAEA,gGACA,sBACE,kBAAIA,WAAW,MAAf,oBAAyC,0BAAYA,WAAW,MAAvB,mCACzC,kBAAIA,WAAW,MAAf,oCAAyD,0BAAYA,WAAW,MAAvB,QAAzD,OAAkH,0BAAYA,WAAW,MAAvB,MAAlH,gBACJ,0BAAYA,WAAW,MAAvB,8CACI,kBAAIA,WAAW,MAAf,kEAEF,kBACE,GAAM,gBADR,gBAGA,kBACE,GAAM,iBADR,8BAGA,qBAAG,iBAAGA,WAAW,IACb,KAAQ,sEADT,sBAGH,8DAA6C,0BAAYA,WAAW,KAAvB,OAA7C,gBAA6G,0BAAYA,WAAW,KAAvB,OAA7G,0FACiE,0BAAYA,WAAW,KAAvB,WADjE,8HAGyC,0BAAYA,WAAW,KAAvB,OAHzC,+CAIW,0BAAYA,WAAW,KAAvB,WAJX,mDAKA,4CAA2B,0BAAYA,WAAW,KAAvB,YAA3B,eAA+F,0BAAYA,WAAW,KAAvB,gBAA/F,sCACS,0BAAYA,WAAW,KAAvB,0BADT,kBAEC,iBAAGA,WAAW,IACX,KAAQ,wDADX,wDAFD,KAKA,+EACA,kBACE,GAAM,0BADR,uCAGA,qBAAG,iBAAGA,WAAW,IACb,KAAQ,sEADT,sBAGH,mGAAwE,0BAAYA,WAAW,KAAvB,YAAxE,4DAEA,uBAAK,oBAAMA,WAAW,MAClB,UAAa,eACb,gBAAiB,MACjB,gCAAiC,GACjC,wBAA2B,CACzB,OAAU,wyDAGhB,qBAAG,0BAAYA,WAAW,KAAvB,kBAAH,uJAEA,qCAAU,iBAAGA,WAAW,IACpB,KAAQ,6CADF,8CAGV,kPAGA,yFACA,sBACE,kBAAIA,WAAW,MAAf,8EACA,kBAAIA,WAAW,MAAf,uHAGF,iJAEA,uIAEA,sBACE,kBAAIA,WAAW,MAAf,YAAiC,0BAAYA,WAAW,MAAvB,gBAAjC,qCAAgI,0BAAYA,WAAW,MAAvB,SAAhI,cACJ,0BAAYA,WAAW,MAAvB,sBADI,sGAGA,kBAAIA,WAAW,MAAf,oLAEO,0BAAYA,WAAW,MAAvB,kDACP,kBAAIA,WAAW,MAAf,oDAAoE,0BAAYA,WAAW,MAAvB,iCAApE,kDAEJ,0BAAYA,WAAW,MAAvB,4DAFI,qCAIA,kBAAIA,WAAW,MAAf,6CAEF,kDAAiC,0BAAYA,WAAW,KAAvB,gBAAjC,qFAEA,2CAA0B,0BAAYA,WAAW,KAAvB,gBAA1B,WAA8F,0BAAYA,WAAW,KAAvB,YAA9F,mBAAsK,0BAAYA,WAAW,KAAvB,SAAtK,KACA,kBACE,GAAM,8BADR,2CAGA,qBAAG,iBAAGA,WAAW,IACb,KAAQ,sEADT,sBAGH,sPAGA,uUAIA,sFACF,0BAAYA,WAAW,KAAvB,gCADE,6FAEoC,0BAAYA,WAAW,KAAvB,SAFpC,+BAGA,uBAAK,oBAAMA,WAAW,MAClB,UAAa,eACb,gBAAiB,MACjB,gCAAiC,GACjC,wBAA2B,CACzB,OAAU,yZAGhB,4HACoB,0BAAYA,WAAW,KAAvB,gBADpB,cAEA,iEAA2C,0BAAYA,WAAW,KAAvB,YAA3C,sPAIA,6GACF,0BAAYA,WAAW,KAAvB,kBADE,kBAC2E,0BAAYA,WAAW,KAAvB,YAD3E,wEAGA,0WAG2D,0BAAYA,WAAW,KAAvB,kBAH3D,kGAMA,iDAAgC,0BAAYA,WAAW,KAAvB,SAAhC,sDACF,0BAAYA,WAAW,KAAvB,YADE,UAC6D,0BAAYA,WAAW,KAAvB,kBAD7D,4BAC+I,0BAAYA,WAAW,KAAvB,YAD/I,wIAGqB,0BAAYA,WAAW,KAAvB,SAHrB,MAG6E,0BAAYA,WAAW,KAAvB,SAH7E,4EAKA,kBACE,GAAM,aADR,yBAGA,kCACF,iBAAGA,WAAW,IACR,KAAQ,8EADd,qBADE,MAQJJ,EAAWK,gBAAiB,EACrB,IAAMC,EAAkB,iBAAmB,CAChD,CACEC,GAAI,cACJC,MAAO,EACPC,MAAO,0BACPC,SAAU,IAId,CACIH,GAAI,aACJC,MAAO,EACPC,MAAO,aACPC,SAAU,IAId,CACIH,GAAI,WACJC,MAAO,EACPC,MAAO,WACPC,SAAU,IAId,CACIH,GAAI,eACJC,MAAO,EACPC,MAAO,eACPC,SAAU,CACN,CACMH,GAAI,gBACJC,MAAO,EACPC,MAAO,6BACPC,SAAU,IAIlB,CACQH,GAAI,yBACJC,MAAO,EACPC,MAAO,sCACPC,SAAU,IAIlB,CACQH,GAAI,6BACJC,MAAO,EACPC,MAAO,0CACPC,SAAU,MAMxB,CACIH,GAAI,YACJC,MAAO,EACPC,MAAO,wBACPC,SAAU,MAMDC,EAAc,I,iCCxP3B,sDAEA,SAASC,EAAgBC,EAAKC,EAAKC,GAYjC,OAXID,KAAOD,EACTG,OAAOC,eAAeJ,EAAKC,EAAK,CAC9BC,MAAOA,EACPG,YAAY,EACZC,cAAc,EACdC,UAAU,IAGZP,EAAIC,GAAOC,EAGNF,EAqBT,SAASQ,EAAQC,EAAQC,GACvB,IAAIC,EAAOR,OAAOQ,KAAKF,GAEvB,GAAIN,OAAOS,sBAAuB,CAChC,IAAIC,EAAUV,OAAOS,sBAAsBH,GACvCC,IAAgBG,EAAUA,EAAQC,QAAO,SAAUC,GACrD,OAAOZ,OAAOa,yBAAyBP,EAAQM,GAAKV,eAEtDM,EAAKM,KAAKC,MAAMP,EAAME,GAGxB,OAAOF,EAGT,SAASQ,EAAeC,GACtB,IAAK,IAAIC,EAAI,EAAGA,EAAIC,UAAUC,OAAQF,IAAK,CACzC,IAAIG,EAAyB,MAAhBF,UAAUD,GAAaC,UAAUD,GAAK,GAE/CA,EAAI,EACNb,EAAQL,OAAOqB,IAAS,GAAMC,SAAQ,SAAUxB,GAC9CF,EAAgBqB,EAAQnB,EAAKuB,EAAOvB,OAE7BE,OAAOuB,0BAChBvB,OAAOwB,iBAAiBP,EAAQjB,OAAOuB,0BAA0BF,IAEjEhB,EAAQL,OAAOqB,IAASC,SAAQ,SAAUxB,GACxCE,OAAOC,eAAegB,EAAQnB,EAAKE,OAAOa,yBAAyBQ,EAAQvB,OAKjF,OAAOmB,EAkBT,SAASQ,EAAyBJ,EAAQK,GACxC,GAAc,MAAVL,EAAgB,MAAO,GAE3B,IAEIvB,EAAKoB,EAFLD,EAlBN,SAAuCI,EAAQK,GAC7C,GAAc,MAAVL,EAAgB,MAAO,GAC3B,IAEIvB,EAAKoB,EAFLD,EAAS,GACTU,EAAa3B,OAAOQ,KAAKa,GAG7B,IAAKH,EAAI,EAAGA,EAAIS,EAAWP,OAAQF,IACjCpB,EAAM6B,EAAWT,GACbQ,EAASE,QAAQ9B,IAAQ,IAC7BmB,EAAOnB,GAAOuB,EAAOvB,IAGvB,OAAOmB,EAMMY,CAA8BR,EAAQK,GAInD,GAAI1B,OAAOS,sBAAuB,CAChC,IAAIqB,EAAmB9B,OAAOS,sBAAsBY,GAEpD,IAAKH,EAAI,EAAGA,EAAIY,EAAiBV,OAAQF,IACvCpB,EAAMgC,EAAiBZ,GACnBQ,EAASE,QAAQ9B,IAAQ,GACxBE,OAAO+B,UAAUC,qBAAqBC,KAAKZ,EAAQvB,KACxDmB,EAAOnB,GAAOuB,EAAOvB,IAIzB,OAAOmB,EAGT,IAIIiB,EAA0BC,IAAMC,cAAc,IAS9CC,EAAmB,SAA0BpD,GAC/C,IAAIqD,EAAoBH,IAAMI,WAAWL,GACrCM,EAAgBF,EAMpB,OAJIrD,IACFuD,EAjBoB,oBAiBOvD,EAAcA,EAAWqD,GAAqBtB,EAAeA,EAAe,GAAIsB,GAAoBrD,IAG1HuD,GAULC,EAAW,CACbC,WAAY,OACZC,QAAS,SAAiBC,GACxB,IAAIlD,EAAWkD,EAAKlD,SACpB,OAAoByC,IAAMU,cAAcV,IAAMW,SAAU,GAAIpD,KAG5DqD,EAAgCZ,IAAMa,YAAW,SAAU9D,EAAO+D,GACpE,IAAIC,EAAiBhE,EAAMD,WACvBE,EAAUD,EAAMC,QAChBgE,EAAejE,EAAMiE,aACrB/D,EAAaF,EAAME,WACnBgE,EAAM3B,EAAyBvC,EAAO,CAAC,aAAc,UAAW,eAAgB,eAEhFD,EAAaoD,EAAiBa,GAC9BG,EAAOlE,EACPmE,EAAYrE,EAAW,GAAGsE,OAAOnE,EAAY,KAAKmE,OAAOF,KAAUpE,EAAWoE,IAASZ,EAASY,IAASF,EAE7G,OAAID,EACkBf,IAAMU,cAAcS,EAAWtC,EAAeA,EAAe,CAC/EiC,IAAKA,GACJG,GAAM,GAAI,CACXnE,WAAYiE,KAIIf,IAAMU,cAAcS,EAAWtC,EAAe,CAChEiC,IAAKA,GACJG,OAGL,SAASP,EAAeQ,EAAMnE,GAC5B,IAAIsE,EAAOrC,UACPhC,EAAUD,GAASA,EAAMC,QAE7B,GAAoB,kBAATkE,GAAqBlE,EAAS,CACvC,IAAIsE,EAAaD,EAAKpC,OAClBsC,EAAwB,IAAIC,MAAMF,GACtCC,EAAsB,GAAKX,EAC3B,IAAIa,EAAW,GAEf,IAAK,IAAI9D,KAAOZ,EACV2E,eAAe5B,KAAK/C,EAAOY,KAC7B8D,EAAS9D,GAAOZ,EAAMY,IAI1B8D,EAAST,aAAeE,EACxBO,EAAQ,QAAmC,kBAATP,EAAoBA,EAAOlE,EAC7DuE,EAAsB,GAAKE,EAE3B,IAAK,IAAI1C,EAAI,EAAGA,EAAIuC,EAAYvC,IAC9BwC,EAAsBxC,GAAKsC,EAAKtC,GAGlC,OAAOiB,IAAMU,cAAc9B,MAAM,KAAM2C,GAGzC,OAAOvB,IAAMU,cAAc9B,MAAM,KAAMyC,GA5BzCT,EAAiBe,YAAc","file":"static/js/21.e4b70f5a.chunk.js","sourcesContent":["\nimport React from 'react'\nimport { mdx } from '@mdx-js/react'\nexport const readingTime = {\"text\":\"6 min read\",\"minutes\":5.07,\"time\":304200,\"words\":1014}\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\n\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <h1 {...{\n      \"id\": \"forms\"\n    }}>{`Forms`}</h1>\n    <h2 {...{\n      \"id\": \"-your-notes\"\n    }}>{`üìù Your Notes`}</h2>\n    <p>{`Elaborate on your learnings here in `}<inlineCode parentName=\"p\">{`src/exercise/06.md`}</inlineCode></p>\n    <h2 {...{\n      \"id\": \"background\"\n    }}>{`Background`}</h2>\n    <p>{`In React, there actually aren‚Äôt a ton of things you have to learn to interact\nwith forms beyond what you can do with regular DOM APIs and JavaScript. Which I\nthink is pretty awesome.`}</p>\n    <p>{`You can attach a submit handler to a form element with the `}<inlineCode parentName=\"p\">{`onSubmit`}</inlineCode>{` prop. This\nwill be called with the submit event which has a `}<inlineCode parentName=\"p\">{`target`}</inlineCode>{`. That `}<inlineCode parentName=\"p\">{`target`}</inlineCode>{` is a\nreference to the `}<inlineCode parentName=\"p\">{`<form>`}</inlineCode>{` DOM node which has a reference to the elements of the\nform which can be used to get the values out of the form!`}</p>\n    <h2 {...{\n      \"id\": \"exercise\"\n    }}>{`Exercise`}</h2>\n    <p>{`Production deploys:`}</p>\n    <ul>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"http://react-fundamentals.netlify.app/isolated/exercise/06.js\"\n        }}>{`Exercise`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"http://react-fundamentals.netlify.app/isolated/final/06.js\"\n        }}>{`Final`}</a></li>\n    </ul>\n    <p>{`In this exercise, we have a form where you can submit a username and then you‚Äôll\nget an ‚Äúalert‚Äù showing what you typed.`}</p>\n    <p>{`ü¶â There are several ways to get the value of the name input:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`Via their index: `}<inlineCode parentName=\"li\">{`event.target.elements[0].value`}</inlineCode></li>\n      <li parentName=\"ul\">{`Via the elements object by their `}<inlineCode parentName=\"li\">{`name`}</inlineCode>{` or `}<inlineCode parentName=\"li\">{`id`}</inlineCode>{` attribute:\n`}<inlineCode parentName=\"li\">{`event.target.elements.usernameInput.value`}</inlineCode></li>\n      <li parentName=\"ul\">{`There‚Äôs another that I‚Äôll save for the extra credit`}</li>\n    </ul>\n    <h2 {...{\n      \"id\": \"extra-credit\"\n    }}>{`Extra Credit`}</h2>\n    <h3 {...{\n      \"id\": \"1--using-refs\"\n    }}>{`1. üíØ using refs`}</h3>\n    <p><a parentName=\"p\" {...{\n        \"href\": \"http://react-fundamentals.netlify.app/isolated/final/06.extra-1.js\"\n      }}>{`Production deploy`}</a></p>\n    <p>{`Another way to get the value is via a `}<inlineCode parentName=\"p\">{`ref`}</inlineCode>{` in React. A `}<inlineCode parentName=\"p\">{`ref`}</inlineCode>{` is an object that\nstays consistent between renders of your React component. It has a `}<inlineCode parentName=\"p\">{`current`}</inlineCode>{`\nproperty on it which can be updated to any value at any time. In the case of\ninteracting with DOM nodes, you can pass a `}<inlineCode parentName=\"p\">{`ref`}</inlineCode>{` to a React element and React\nwill set the `}<inlineCode parentName=\"p\">{`current`}</inlineCode>{` property to the DOM node that‚Äôs rendered.`}</p>\n    <p>{`So if you create an `}<inlineCode parentName=\"p\">{`inputRef`}</inlineCode>{` object via `}<inlineCode parentName=\"p\">{`React.useRef`}</inlineCode>{`, you could access the\nvalue via: `}<inlineCode parentName=\"p\">{`inputRef.current.value`}</inlineCode>{`\n(üìú`}<a parentName=\"p\" {...{\n        \"href\": \"https://reactjs.org/docs/hooks-reference.html#useref\"\n      }}>{`https://reactjs.org/docs/hooks-reference.html#useref`}</a>{`)`}</p>\n    <p>{`Try to get the usernameInput‚Äôs value using a ref.`}</p>\n    <h3 {...{\n      \"id\": \"2--validate-lower-case\"\n    }}>{`2. üíØ Validate lower-case`}</h3>\n    <p><a parentName=\"p\" {...{\n        \"href\": \"http://react-fundamentals.netlify.app/isolated/final/06.extra-2.js\"\n      }}>{`Production deploy`}</a></p>\n    <p>{`With React, the way you use state is via a special ‚Äúhook‚Äù called `}<inlineCode parentName=\"p\">{`useState`}</inlineCode>{`.\nHere‚Äôs a simple example of what that looks like:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\",\n        \"data-language\": \"jsx\",\n        \"data-highlighted-line-numbers\": \"\",\n        \"dangerouslySetInnerHTML\": {\n          \"__html\": \"<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">Counter</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">const</span> <span class=\\\"token punctuation\\\">[</span>count<span class=\\\"token punctuation\\\">,</span> setCount<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span> React<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">useState</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">increment</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token function\\\">setCount</span><span class=\\\"token punctuation\\\">(</span>count <span class=\\\"token operator\\\">+</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>button</span> <span class=\\\"token attr-name\\\">onClick</span><span class=\\\"token script language-javascript\\\"><span class=\\\"token script-punctuation punctuation\\\">=</span><span class=\\\"token punctuation\\\">{</span>increment<span class=\\\"token punctuation\\\">}</span></span><span class=\\\"token punctuation\\\">></span></span><span class=\\\"token punctuation\\\">{</span>count<span class=\\\"token punctuation\\\">}</span><span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>button</span><span class=\\\"token punctuation\\\">></span></span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\"\n        }\n      }}></code></pre>\n    <p><inlineCode parentName=\"p\">{`React.useState`}</inlineCode>{` accepts a default initial value and returns an array. Typically\nyou‚Äôll destructure that array to get the state and a state updater function.`}</p>\n    <p>{`üìú `}<a parentName=\"p\" {...{\n        \"href\": \"https://reactjs.org/docs/hooks-state.html\"\n      }}>{`https://reactjs.org/docs/hooks-state.html`}</a></p>\n    <p>{`In this extra credit, we‚Äôre going to say that this username input only accepts\nlower-case characters. So if someone types an upper-case character, that‚Äôs\ninvalid input and we‚Äôll show an error message.`}</p>\n    <p>{`If we want our form to be dynamic, we‚Äôll need a few things:`}</p>\n    <ol>\n      <li parentName=\"ol\">{`Component state to store the dynamic values (an error message in our case)`}</li>\n      <li parentName=\"ol\">{`A change handler on the input so we know what the value is as the user\nchanges it and can update the error state.`}</li>\n    </ol>\n    <p>{`Once we have that wired up then we can render the error message and disable the\nsubmit button if there‚Äôs an error.`}</p>\n    <p>{`üí∞ This one‚Äôs a little more tricky, so here are a few things you need to do to\nmake this work:`}</p>\n    <ol>\n      <li parentName=\"ol\">{`Create a `}<inlineCode parentName=\"li\">{`handleChange`}</inlineCode>{` function that accepts the change `}<inlineCode parentName=\"li\">{`event`}</inlineCode>{` and uses\n`}<inlineCode parentName=\"li\">{`event.target.value`}</inlineCode>{` to get the value of the input. Remember this event will\nbe triggered on the input, not the form.`}</li>\n      <li parentName=\"ol\">{`Use the value of the input to determine whether there‚Äôs an error. There‚Äôs an\nerror if the user typed any upper-case characters. You can check this really\neasily via `}<inlineCode parentName=\"li\">{`const isValid = value === value.toLowerCase()`}</inlineCode></li>\n      <li parentName=\"ol\">{`If there‚Äôs an error, set the error state to `}<inlineCode parentName=\"li\">{`'Username must be lower case'`}</inlineCode>{`.\n(üí∞ here‚Äôs how you do that:\n`}<inlineCode parentName=\"li\">{`setError(isValid ? null : 'Username must be lower case')`}</inlineCode>{`) and disable the\nsubmit button.`}</li>\n      <li parentName=\"ol\">{`Finally, display the error in an element`}</li>\n    </ol>\n    <p>{`You may consider adding a `}<inlineCode parentName=\"p\">{`role=\"alert\"`}</inlineCode>{` to the element you use to display the\nerror to assist with screen reader users.`}</p>\n    <p>{`Make sure you pass `}<inlineCode parentName=\"p\">{`handleChange`}</inlineCode>{` to the `}<inlineCode parentName=\"p\">{`onChange`}</inlineCode>{` handler of the `}<inlineCode parentName=\"p\">{`input`}</inlineCode>{`.`}</p>\n    <h3 {...{\n      \"id\": \"3--control-the-input-value\"\n    }}>{`3. üíØ Control the input value`}</h3>\n    <p><a parentName=\"p\" {...{\n        \"href\": \"http://react-fundamentals.netlify.app/isolated/final/06.extra-3.js\"\n      }}>{`Production deploy`}</a></p>\n    <p>{`Sometimes you have form inputs which you want to programmatically control. Maybe\nyou want to set their value explicitly when the user clicks a button, or maybe\nyou want to change what the value is as the user is typing.`}</p>\n    <p>{`This is why React supports Controlled Form inputs. So far in our exercises, all\nof the form inputs have been ‚Äúuncontrolled‚Äù which means that the browser is\nmaintaining the state of the input by itself and we can be notified of changes\nand ‚Äúquery‚Äù for the value from the DOM node.`}</p>\n    <p>{`If we want to explicitly update that value we could do this:\n`}<inlineCode parentName=\"p\">{`inputNode.value = 'whatever'`}</inlineCode>{` but that‚Äôs pretty imperative. Instead, React\nallows us to programmatically set the `}<inlineCode parentName=\"p\">{`value`}</inlineCode>{` prop on the input like so:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\",\n        \"data-language\": \"jsx\",\n        \"data-highlighted-line-numbers\": \"\",\n        \"dangerouslySetInnerHTML\": {\n          \"__html\": \"<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>input</span> <span class=\\\"token attr-name\\\">value</span><span class=\\\"token script language-javascript\\\"><span class=\\\"token script-punctuation punctuation\\\">=</span><span class=\\\"token punctuation\\\">{</span>myInputValue<span class=\\\"token punctuation\\\">}</span></span> <span class=\\\"token punctuation\\\">/></span></span>\\n\"\n        }\n      }}></code></pre>\n    <p>{`Once we do that, React ensures that the value of that input can never differ\nfrom the value of the `}<inlineCode parentName=\"p\">{`myInputValue`}</inlineCode>{` variable.`}</p>\n    <p>{`Typically you‚Äôll want to provide an `}<inlineCode parentName=\"p\">{`onChange`}</inlineCode>{` handler as well so you can be\nmade aware of ‚Äúsuggested changes‚Äù to the input‚Äôs value (where React is basically\nsaying \"if I were controlling this value, here‚Äôs what I would do, but you do\nwhatever you want with this\").`}</p>\n    <p>{`Typically you‚Äôll want to store the input‚Äôs value in a state variable (via\n`}<inlineCode parentName=\"p\">{`React.useState`}</inlineCode>{`) and then the `}<inlineCode parentName=\"p\">{`onChange`}</inlineCode>{` handler will call the state updater to\nkeep that value up-to-date.`}</p>\n    <p>{`Wouldn‚Äôt it be even cooler if instead of showing an error message we just didn‚Äôt\nallow the user to enter invalid input? Yeah! In this extra credit I‚Äôve backed us up\nand removed the error stuff and now we‚Äôre going to control the input state and\ncontrol the input value. Anytime there‚Äôs a change we‚Äôll call `}<inlineCode parentName=\"p\">{`.toLowerCase()`}</inlineCode>{` on\nthe value to ensure that it‚Äôs always the lower case version of what the user\ntypes.`}</p>\n    <p>{`So we can get rid of our `}<inlineCode parentName=\"p\">{`error`}</inlineCode>{` state and instead we‚Äôll manage state called\n`}<inlineCode parentName=\"p\">{`username`}</inlineCode>{` (with `}<inlineCode parentName=\"p\">{`React.useState`}</inlineCode>{`) and we‚Äôll set the `}<inlineCode parentName=\"p\">{`username`}</inlineCode>{` to whatever the\ninput value is. We‚Äôll just lowercase the input value before doing so. Then we‚Äôll\npass that value to the `}<inlineCode parentName=\"p\">{`input`}</inlineCode>{`'s `}<inlineCode parentName=\"p\">{`value`}</inlineCode>{` prop and now it‚Äôs impossible for users\nto enter an invalid value!`}</p>\n    <h2 {...{\n      \"id\": \"-feedback\"\n    }}>{`ü¶â Feedback`}</h2>\n    <p>{`Fill out\n`}<a parentName=\"p\" {...{\n        \"href\": \"https://ws.kcd.im/?ws=React%20Fundamentals%20%E2%9A%9B&e=06%3A%20Forms&em=\"\n      }}>{`the feedback form`}</a>{`.`}</p>\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;\nexport const tableOfContents = (components={}) => [\n  {\n    id: \"-your-notes\",\n    level: 2,\n    title: \"üìù Your Notes\",\n    children: [\n        \n      ]\n  },\n{\n    id: \"background\",\n    level: 2,\n    title: \"Background\",\n    children: [\n        \n      ]\n  },\n{\n    id: \"exercise\",\n    level: 2,\n    title: \"Exercise\",\n    children: [\n        \n      ]\n  },\n{\n    id: \"extra-credit\",\n    level: 2,\n    title: \"Extra Credit\",\n    children: [\n        {\n              id: \"1--using-refs\",\n              level: 3,\n              title: \"1. üíØ using refs\",\n              children: [\n                      \n                    ]\n            },\n      {\n              id: \"2--validate-lower-case\",\n              level: 3,\n              title: \"2. üíØ Validate lower-case\",\n              children: [\n                      \n                    ]\n            },\n      {\n              id: \"3--control-the-input-value\",\n              level: 3,\n              title: \"3. üíØ Control the input value\",\n              children: [\n                      \n                    ]\n            }\n      ]\n  },\n{\n    id: \"-feedback\",\n    level: 2,\n    title: \"ü¶â Feedback\",\n    children: [\n        \n      ]\n  }\n]\n\nexport const frontMatter = {}\n\n","import React from 'react';\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread2(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}\n\nvar isFunction = function isFunction(obj) {\n  return typeof obj === 'function';\n};\n\nvar MDXContext = /*#__PURE__*/React.createContext({});\nvar withMDXComponents = function withMDXComponents(Component) {\n  return function (props) {\n    var allComponents = useMDXComponents(props.components);\n    return /*#__PURE__*/React.createElement(Component, _extends({}, props, {\n      components: allComponents\n    }));\n  };\n};\nvar useMDXComponents = function useMDXComponents(components) {\n  var contextComponents = React.useContext(MDXContext);\n  var allComponents = contextComponents;\n\n  if (components) {\n    allComponents = isFunction(components) ? components(contextComponents) : _objectSpread2(_objectSpread2({}, contextComponents), components);\n  }\n\n  return allComponents;\n};\nvar MDXProvider = function MDXProvider(props) {\n  var allComponents = useMDXComponents(props.components);\n  return /*#__PURE__*/React.createElement(MDXContext.Provider, {\n    value: allComponents\n  }, props.children);\n};\n\nvar TYPE_PROP_NAME = 'mdxType';\nvar DEFAULTS = {\n  inlineCode: 'code',\n  wrapper: function wrapper(_ref) {\n    var children = _ref.children;\n    return /*#__PURE__*/React.createElement(React.Fragment, {}, children);\n  }\n};\nvar MDXCreateElement = /*#__PURE__*/React.forwardRef(function (props, ref) {\n  var propComponents = props.components,\n      mdxType = props.mdxType,\n      originalType = props.originalType,\n      parentName = props.parentName,\n      etc = _objectWithoutProperties(props, [\"components\", \"mdxType\", \"originalType\", \"parentName\"]);\n\n  var components = useMDXComponents(propComponents);\n  var type = mdxType;\n  var Component = components[\"\".concat(parentName, \".\").concat(type)] || components[type] || DEFAULTS[type] || originalType;\n\n  if (propComponents) {\n    return /*#__PURE__*/React.createElement(Component, _objectSpread2(_objectSpread2({\n      ref: ref\n    }, etc), {}, {\n      components: propComponents\n    }));\n  }\n\n  return /*#__PURE__*/React.createElement(Component, _objectSpread2({\n    ref: ref\n  }, etc));\n});\nMDXCreateElement.displayName = 'MDXCreateElement';\nfunction createElement (type, props) {\n  var args = arguments;\n  var mdxType = props && props.mdxType;\n\n  if (typeof type === 'string' || mdxType) {\n    var argsLength = args.length;\n    var createElementArgArray = new Array(argsLength);\n    createElementArgArray[0] = MDXCreateElement;\n    var newProps = {};\n\n    for (var key in props) {\n      if (hasOwnProperty.call(props, key)) {\n        newProps[key] = props[key];\n      }\n    }\n\n    newProps.originalType = type;\n    newProps[TYPE_PROP_NAME] = typeof type === 'string' ? type : mdxType;\n    createElementArgArray[1] = newProps;\n\n    for (var i = 2; i < argsLength; i++) {\n      createElementArgArray[i] = args[i];\n    }\n\n    return React.createElement.apply(null, createElementArgArray);\n  }\n\n  return React.createElement.apply(null, args);\n}\n\nexport { MDXContext, MDXProvider, createElement as mdx, useMDXComponents, withMDXComponents };\n"],"sourceRoot":""}